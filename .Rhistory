png('output/UC_barplot.png', width = 1200, height=1000)
ggplot(ewp.UC[1:num.pathways.UC], aes(x=reorder(Description, -pvalue), y=Count)) +
geom_bar(stat ="identity", fill="#BA8UC7") +
coord_flip() +
labs(x="", y="UC DEG gene count", fill="") +
theme(axis.text=element_text(size=25)) +
theme(legend.position="none")
dev.off()
write.table(ewp.UC.res, file="output/UC_enrich_res.txt", sep="\t", quote=FALSE, row.names = FALSE)
ewp.UC <- clusterProfiler::enricher(
deg.UC$ENTREZ.ID,
universe = bkgd.genes$ENTREZ.ID,
pAdjustMethod = "fdr",
pvalueCutoff = 0.05,
qvalueCutoff = 0.02,
TERM2GENE = wpid2gene,
TERM2NAME = wpid2name)
ewp.UC.res <- as.data.frame(ewp.UC)
# number of genes measured in pathways
length(ewp.UC@universe)
# number of DEG in pathways
length(deg.UC$ENTREZ.ID[deg.UC$ENTREZ.ID %in% unique(wp2gene$gene)])
num.pathways.UC <- dim(ewp.UC.res)[1]
png('output/UC_barplot.png', width = 1200, height=1000)
ggplot(ewp.UC[1:num.pathways.UC], aes(x=reorder(Description, -pvalue), y=Count)) +
geom_bar(stat ="identity", fill="#BA8UC7") +
coord_flip() +
labs(x="", y="UC DEG gene count", fill="") +
theme(axis.text=element_text(size=25)) +
theme(legend.position="none")
dev.off()
write.table(ewp.UC.res, file="output/UC_enrich_res.txt", sep="\t", quote=FALSE, row.names = FALSE)
View(wpid2name)
png('output/UC_barplot.png', width = 1200, height=1000)
ggplot(ewp.UC[1:num.pathways.UC], aes(x=reorder(Description, -pvalue), y=Count)) +
geom_bar(stat ="identity", fill="#BA8CD7") +
coord_flip() +
labs(x="", y="UC DEG gene count", fill="") +
theme(axis.text=element_text(size=25)) +
theme(legend.position="none")
dev.off()
write.table(ewp.UC.res, file="output/UC_enrich_res.txt", sep="\t", quote=FALSE, row.names = FALSE)
View(ewp.UC.res)
View(ewp.CD.res)
venn.diagram(x = list(ewp.CD.res$ID, ewp.UC.res$ID),
category.names = c("CD" , "UC"),
filename = 'output/venn_pathways.png',
output=TRUE,
col=c("#440154ff", '#21908dff'),
fill = c(alpha("#440154ff",0.3), alpha('#21908dff',0.3)),
cex = 1.5,
)
#to find common altered pathways in both subtypes intersection of two results
common.pathways <- intersect(ewp.CD.res$ID, ewp.UC.res$ID)
common.pathways
common <- intersect(ewp.CD.res, ewp.UC.res)
View(common)
#to find common altered pathways in both subtypes intersection of two results
common.pathways <- generics:intersect(ewp.CD.res, ewp.UC.res)
#to find common altered pathways in both subtypes intersection of two results
common.pathways <- generics::intersect(ewp.CD.res, ewp.UC.res)
View(common.pathways)
#to find common altered pathways in both subtypes intersection of two results
common.pathways <- intersect(ewp.CD.res$ID, ewp.UC.res$ID)
ewp.CD.res[common.pathways,]
res <- ewp.CD.res[common.pathways,]
View(res)
write.table(res, file='output/common_altered-pathways.txt', sep = "\t", quote = FALSE, row.names = FALSE)
View(dataset.b)
View(dataset.b2)
View(dataset.CD)
RCy3::cytoscapePing()
View(dataset.CD)
RCy3::cytoscapePing()
RCy3::installApp(c("wikipathways","CyTargetLinker"))
RCy3::commandsRun('wikipathways import-as-pathway id=WP5095')
toggleGraphicsDetails()
library(data.table)
library(RCy3)
toggleGraphicsDetails()
RCy3::mapTableColumn("Ensembl", "Homo sapiens", "Ensembl", "Entrez Gene")
loadTableData(dataset.CD, data.key.column = "SYMBOL", table.key.column = "ENTREZ.ID")
loadTableData(dataset.CD, data.key.column = "SYMBOL", table.key.column = "ENTREZ ID")
loadTableData(dataset.CD, data.key.column = "SYMBOL", table.key.column = "ENTREZID")
tb <- RCy3::mapTableColumn("Ensembl", "Homo sapiens", "Ensembl", "Entrez Gene")
View(tb)
loadTableData(dataset.CD, data.key.column = "SYMBOL", table.key.column = "Entrez Gene")
loadTableData(dataset.CD, data.key.column = "ENTREZ.ID", table.key.column = "Entrez Gene")
loadTableData(dataset.UC, data.key.column = "ENTREZ.ID", table.key.column = "Entrez Gene")
RCy3::installApp("enhancedGraphics")
RCy3::copyVisualStyle("WikiPathways", "my_style_heatmap")
d1 <-loadTableData(dataset.CD, data.key.column = "ENTREZ.ID", table.key.column = "Entrez Gene")
d1
View(dataset.CD)
View(dataset.UC)
#before starting we shold merge data table of CD and UC disease
data.IBD <- rbind(dataset.CD, dataset.UC)
View(data.IBD)
#before starting we shold merge data table of CD and UC disease
data.IBD <- merge(dataset.CD, dataset.UC, by = "ENTREZ.ID")
View(data.IBD)
colnames(data.IBD)[3] <- "logFC_CD"
colnames(data.IBD)[7] <- "logFC_UC"
colnames(data.IBD)[4] <- "pvalue_CD"
colnames(data.IBD)[8] <- "pvalue_UC"
library(data.table)
library(RCy3)
RCy3::cytoscapePing()
RCy3::installApp(c("wikipathways","CyTargetLinker"))
RCy3::commandsRun('wikipathways import-as-pathway id=WP5095')
toggleGraphicsDetails()
RCy3::mapTableColumn("Ensembl", "Homo sapiens", "Ensembl", "Entrez Gene")
loadTableData(data.IBD, data.key.column = "ENTREZ.ID", table.key.column = "Entrez Gene")
RCy3::installApp("enhancedGraphics")
RCy3::copyVisualStyle("WikiPathways", "my_style_heatmap")
RCy3::setNodeCustomHeatMapChart(c("logFC_CD","logFC_UC"), slot = 2, style.name = "my_style_heatmap",
colors = c("#CC3300","#FFFFFF","#6699FF","#CCCCCC"))
RCy3::setVisualStyle("my_style_heatmap")
png.file <- file.path("output/PathwayVisualization.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(),"output/PathwayVisualization.cys")
saveSession(cys.file)
png.file <- file.path("output/PathwayVisualization.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(),"output/PathwayVisualization.cys")
saveSession(cys.file)
png.file <- file.path("output/PathwayVisualization.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(),"output/PathwayVisualization.cys")
saveSession(cys.file)
View(ewp.CD.res)
pwy <- unique(ewp.cd.res[,c(1,2)])
pwy <- unique(ewp.CD.res[,c(1,2)])
colnames(pwy) <- c("id","label")
View(pwy)
pwy$type <- 'pathway'
edges <- wpid2gene[wpid2gene$wpid %in% pwy$id,]
View(edges)
colnames(edges) <- c("source", "target")
genes <- unique(deg.CD)
View(genes)
genes <- transform(genes, id = as.character(id))
colnames(genes) <- c("id","label")
genes <- transform(genes, id = as.character(id))
genes$type <- 'gene'
edges <- unique(edges[edges$target %in% genes$id,])
genes <- genes[genes$id %in% edges$target,]
nodes <- dplyr::bind_rows(genes, pwy)
View(nodes)
rownames(nodes) <- NULL
View(data.IBD)
createNetworkFromDataFrames(nodes=nodes,edges=edges,title="Pathway-Gene-Associations", collection="PathwayGeneCrosstalk")
loadTableData(data.IBD, data.key.column = "ENTREZ.ID", table.key.column = "id")
# Visual style
RCy3::copyVisualStyle("default","wp.vis")
RCy3::setNodeLabelMapping("label", style.name="wp.vis")
RCy3::lockNodeDimensions(TRUE, style.name="wp.vis")
RCy3::setNodeShapeMapping('type', c('gene','pathway'), c("ellipse","hexagon"), style.name="wp.vis")
RCy3::setNodeSizeMapping('type', c('gene','pathway'), c(40,25), mapping.type = "d", style.name = "wp.vis")
data.values<-c(-1,0,1)
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
library(RColorBrewer)
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping("logFC_CD", data.values, node.colors, default.color = "#99FF99", style.name = "wp.vis")
RCy3::setVisualStyle("wp.vis")
RCy3::toggleGraphicsDetails()
# Saving output
svg.file <- file.path(getwd(), "output/PathwayCrosstalk.svg")
exportImage(svg.file,'SVG')
exportImage(png.file,'PNG', zoom = 500)
getwd()
png.file <- file.path(getwd(), "output/PathwayCrosstalk.png")
exportImage(png.file,'PNG', zoom = 500)
exportImage(png.file,'PNG', zoom = 500)
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(), "output/PathwayCrosstalk.cys")
saveSession(cys.file)
RCy3::cytoscapePing()
installApp('CyTargetLinker')
pwy <- unique(ewp.CD.res[,c(1,2)])
colnames(pwy) <- c("id","label")
pwy$type <- 'pathway'
View(pwy)
edges <- wpid2gene[wpid2gene$wpid %in% pwy$id,]
colnames(edges) <- c("source", "target")
genes <- unique(deg.CD)
colnames(genes) <- c("id","label")
genes <- transform(genes, id = as.character(id))
genes$type <- 'gene'
edges <- unique(edges[edges$target %in% genes$id,])
genes <- genes[genes$id %in% edges$target,]
nodes <- dplyr::bind_rows(genes, pwy)
rownames(nodes) <- NULL
loadTableData(data.IBD, data.key.column = "ENTREZ.ID", table.key.column = "id")
# Visual style
RCy3::copyVisualStyle("default","wp.vis")
RCy3::setNodeLabelMapping("label", style.name="wp.vis")
RCy3::lockNodeDimensions(TRUE, style.name="wp.vis")
RCy3::setNodeShapeMapping('type', c('gene','pathway'), c("ellipse","hexagon"), style.name="wp.vis")
RCy3::setNodeSizeMapping('type', c('gene','pathway'), c(40,25), mapping.type = "d", style.name = "wp.vis")
data.values<-c(-1,0,1)
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping("logFC_UC", data.values, node.colors, default.color = "#99FF99", style.name = "wp.vis")
RCy3::setVisualStyle("wp.vis")
RCy3::toggleGraphicsDetails()
drugbank <- file.path(getwd(), "data/drugbank-5.1.0.xgmml")
drugbank
# run CyTargetLinker
commandsRun(paste0('cytargetlinker extend idAttribute="id" linkSetFiles="', drugbank, '"'))
commandsRun('cytargetlinker applyLayout network="current"')
RCy3::setVisualStyle("wp.vis")
selected <- RCy3::selectNodes(nodes="drug", by.col = "CTL.Type")
RCy3::setNodeShapeBypass(node.names = selected$nodes, new.shapes = "Triangle")
RCy3::setNodeColorBypass(node.names = selected$nodes, "#FFFFCE")
RCy3::setNodeBorderColorBypass(node.names = selected$nodes, "#000000")
RCy3::setNodeBorderWidthBypass(node.names = selected$nodes, 4)
RCy3::clearSelection()
RCy3::toggleGraphicsDetails()
png.file <- file.path(getwd(), "output/drug_target.png")
exportImage(png.file,'PNG', zoom = 500)
exportImage(png.file,'PNG', zoom = 500)
exportImage(png.file,'PNG', zoom = 500)
#CD read, the datasets may change depends on our observation (ileum or rectum)
dataset.CD <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum.tab")
#UC read
dataset.UC <- read.delim("data/table_UC_Rectum_vs_nonIBD_Rectum.tab")
View(dataset.CD)
hs <- org.Hs.eg.db
entrezID <- AnnotationDbi::select(hs,
keys = dataset.CD$X,
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL")
dataset.b  <- dataset.CD
dataset.b2 <- dataset.UC
View(entrezID)
#filter out double gene symbols
entrezID<- entrezID %>% distinct(entrezID$SYMBOL, .keep_all = TRUE)
# add entrezIDs to each dataset
dataset.CD <- cbind(entrezID$ENTREZID,dataset.CD)
View(dataset.UC)
dataset.UC <- cbind(entrezID$ENTREZID,dataset.UC)
colnames(dataset.CD)[1] <- "ENTREZ.ID"
colnames(dataset.CD)[2] <- "SYMBOL"
colnames(dataset.UC)[1] <- "ENTREZ.ID"
colnames(dataset.UC)[2] <- "SYMBOL"
# filter genes without Entrez Gene identifier
dataset.CD <- dataset.CD %>% tidyr::drop_na(ENTREZ.ID)
dataset.UC <- dataset.UC %>% tidyr::drop_na(ENTREZ.ID)
#remove some unused columns
dataset.CD <- subset( dataset.CD, select = -c(3,5,6,7,9 ) )
dataset.UC <- subset( dataset.UC, select = -c(3,5,6,7,9 ) )
png('output/volcanoplot_CD_rectum.png')
EnhancedVolcano(dataset.CD , title = "Chrons Disease on rectum", lab = dataset.CD$SYMBOL,
labSize = 3, x = 'log2FoldChange', y = 'pvalue', pCutoff = 0.05, FCcutoff = 1)
dev.off()
png('output/volcanoplot_UC_rectum.png')
EnhancedVolcano(dataset.UC, title = "Ulcerative Colitis Disease on rectum", lab = dataset.UC$SYMBOL,
labSize = 3, x = 'log2FoldChange', y = 'pvalue', pCutoff = 0.05, FCcutoff = 1)
dev.off()
deg.CD  <-unique(dataset.CD[!is.na(dataset.CD$pvalue) & dataset.CD$pvalue < 0.05 & abs(dataset.CD$log2FoldChange) > 1,c(1,2)])
CD.up   <-unique(dataset.CD[!is.na(dataset.CD$pvalue) & dataset.CD$pvalue < 0.05 & dataset.CD$log2FoldChange > 1,c(1,2)])
CD.down <-unique(dataset.CD[!is.na(dataset.CD$pvalue) & dataset.CD$pvalue < 0.05 & dataset.CD$log2FoldChange < -1,c(1,2)])
deg.UC  <-unique(dataset.UC[!is.na(dataset.UC$pvalue) & dataset.UC$pvalue < 0.05 & abs(dataset.UC$log2FoldChange) > 1,c(1,2)])
UC.up   <-unique(dataset.UC[!is.na(dataset.UC$pvalue) & dataset.UC$pvalue < 0.05 & dataset.UC$log2FoldChange > 1,c(1,2)])
UC.down <-unique(dataset.UC[!is.na(dataset.UC$pvalue) & dataset.UC$pvalue < 0.05 & dataset.UC$log2FoldChange < -1,c(1,2)])
venn.diagram(x = list(CD.up$ENTREZ.ID, CD.down$ENTREZ.ID, UC.up$ENTREZ.ID, UC.down$ENTREZ.ID),
category.names = c("CD up", "CD down" ,"UC up", "UC down"),
filename = 'output/venn_genes.png',
output=FALSE,
col=c("#440154ff","#440154ff", '#21908dff','#21908dff'),
fill = c(alpha("#440154ff",0.3),alpha("#440154ff",0.3), alpha('#21908dff',0.3),alpha('#21908dff',0.3)),
cex = 1.5,
)
#CD read, the datasets may change depends on our observation (ileum or rectum)
dataset.CD <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum.tab")
#UC read
dataset.UC <- read.delim("data/table_UC_Rectum_vs_nonIBD_Rectum.tab")
#get entrez ID of each gene symbols for each disease type
hs <- org.Hs.eg.db
entrezID <- AnnotationDbi::select(hs,
keys = dataset.CD$X,
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL")
#filter out double gene symbols
entrezID<- entrezID %>% distinct(entrezID$SYMBOL, .keep_all = TRUE)
#get back up data before starting
dataset.b  <- dataset.CD
dataset.b2 <- dataset.UC
# add entrezIDs to each dataset
dataset.CD <- cbind(entrezID$ENTREZID,dataset.CD)
dataset.UC <- cbind(entrezID$ENTREZID,dataset.UC)
#change column names
colnames(dataset.CD)[1] <- "ENTREZ.ID"
colnames(dataset.CD)[2] <- "SYMBOL"
colnames(dataset.UC)[1] <- "ENTREZ.ID"
colnames(dataset.UC)[2] <- "SYMBOL"
# filter genes without Entrez Gene identifier
dataset.CD <- dataset.CD %>% tidyr::drop_na(ENTREZ.ID)
dataset.UC <- dataset.UC %>% tidyr::drop_na(ENTREZ.ID)
#remove some unused columns
dataset.CD <- subset( dataset.CD, select = -c(3,5,6,7,9 ) )
dataset.UC <- subset( dataset.UC, select = -c(3,5,6,7,9 ) )
png('output/volcanoplot_CD_rectum.png')
EnhancedVolcano(dataset.CD , title = "Chrons Disease on rectum", lab = dataset.CD$SYMBOL,
labSize = 3, x = 'log2FoldChange', y = 'pvalue', pCutoff = 0.05, FCcutoff = 1)
dev.off()
png('output/volcanoplot_UC_rectum.png')
EnhancedVolcano(dataset.UC, title = "Ulcerative Colitis Disease on rectum", lab = dataset.UC$SYMBOL,
labSize = 3, x = 'log2FoldChange', y = 'pvalue', pCutoff = 0.05, FCcutoff = 1)
dev.off()
#list of all deg from two disease types
deg.CD  <-unique(dataset.CD[!is.na(dataset.CD$pvalue) & dataset.CD$pvalue < 0.05 & abs(dataset.CD$log2FoldChange) > 1,c(1,2)])
CD.up   <-unique(dataset.CD[!is.na(dataset.CD$pvalue) & dataset.CD$pvalue < 0.05 & dataset.CD$log2FoldChange > 1,c(1,2)])
CD.down <-unique(dataset.CD[!is.na(dataset.CD$pvalue) & dataset.CD$pvalue < 0.05 & dataset.CD$log2FoldChange < -1,c(1,2)])
deg.UC  <-unique(dataset.UC[!is.na(dataset.UC$pvalue) & dataset.UC$pvalue < 0.05 & abs(dataset.UC$log2FoldChange) > 1,c(1,2)])
UC.up   <-unique(dataset.UC[!is.na(dataset.UC$pvalue) & dataset.UC$pvalue < 0.05 & dataset.UC$log2FoldChange > 1,c(1,2)])
UC.down <-unique(dataset.UC[!is.na(dataset.UC$pvalue) & dataset.UC$pvalue < 0.05 & dataset.UC$log2FoldChange < -1,c(1,2)])
venn.diagram(x = list(CD.up$ENTREZ.ID, CD.down$ENTREZ.ID, UC.up$ENTREZ.ID, UC.down$ENTREZ.ID),
category.names = c("CD up", "CD down" ,"UC up", "UC down"),
filename = 'output/venn_genes.png',
output=FALSE,
col=c("#440154ff","#440154ff", '#21908dff','#21908dff'),
fill = c(alpha("#440154ff",0.3),alpha("#440154ff",0.3), alpha('#21908dff',0.3),alpha('#21908dff',0.3)),
cex = 1.5,
)
gmt <- rWikiPathways::downloadPathwayArchive(organism = "Homo sapiens",format = "gmt")
wp2gene   <- readPathwayGMT(gmt)
wpid2gene <- wp2gene %>% dplyr::select(wpid,gene) #TERM2GENE
wpid2name <- wp2gene %>% dplyr::select(wpid,name) #TERM2NAME
bkgd.genes <- unique(dataset.CD[,c(1,2)])# genes are commonn for both disease type CD and UC
ewp.CD <- clusterProfiler::enricher(
deg.CD$ENTREZ.ID,
universe = bkgd.genes$ENTREZ.ID,
pAdjustMethod = "fdr",
pvalueCutoff = 0.05,
qvalueCutoff = 0.02,
TERM2GENE = wpid2gene,
TERM2NAME = wpid2name)
ewp.CD.res <- as.data.frame(ewp.CD)
# number of genes measured in pathways
length(ewp.CD@universe)
# number of DEG in pathways
length(deg.CD$ENTREZ.ID[deg.CD$ENTREZ.ID %in% unique(wp2gene$gene)])
num.pathways.CD <- dim(ewp.CD.res)[1]
# export enrichment result
png('output/CD_barplot.png', width = 1200, height=1000)
ggplot(ewp.CD[1:num.pathways.CD], aes(x=reorder(Description, -pvalue), y=Count)) +
geom_bar(stat ="identity", fill="#BA8CD7") +
coord_flip() +
labs(x="", y="CD DEG gene count", fill="") +
theme(axis.text=element_text(size=25)) +
theme(legend.position="none")
dev.off()
write.table(ewp.CD.res, file="output/CD_enrich_res.txt", sep="\t", quote=FALSE, row.names = FALSE)
ewp.UC <- clusterProfiler::enricher(
deg.UC$ENTREZ.ID,
universe = bkgd.genes$ENTREZ.ID,
pAdjustMethod = "fdr",
pvalueCutoff = 0.05,
qvalueCutoff = 0.02,
TERM2GENE = wpid2gene,
TERM2NAME = wpid2name)
ewp.UC.res <- as.data.frame(ewp.UC)
# number of genes measured in pathways
length(ewp.UC@universe)
# number of DEG in pathways
length(deg.UC$ENTREZ.ID[deg.UC$ENTREZ.ID %in% unique(wp2gene$gene)])
num.pathways.UC <- dim(ewp.UC.res)[1]
# export enrichment result
png('output/UC_barplot.png', width = 1200, height=1000)
ggplot(ewp.UC[1:num.pathways.UC], aes(x=reorder(Description, -pvalue), y=Count)) +
geom_bar(stat ="identity", fill="#BA8CD7") +
coord_flip() +
labs(x="", y="UC DEG gene count", fill="") +
theme(axis.text=element_text(size=25)) +
theme(legend.position="none")
dev.off()
write.table(ewp.UC.res, file="output/UC_enrich_res.txt", sep="\t", quote=FALSE, row.names = FALSE)
venn.diagram(x = list(ewp.CD.res$ID, ewp.UC.res$ID),
category.names = c("CD" , "UC"),
filename = 'output/venn_pathways.png',
output=TRUE,
col=c("#440154ff", '#21908dff'),
fill = c(alpha("#440154ff",0.3), alpha('#21908dff',0.3)),
cex = 1.5,
)
#to find common altered pathways in both subtypes intersection of two results
common.pathways <- intersect(ewp.CD.res$ID, ewp.UC.res$ID)
res <- ewp.CD.res[common.pathways,]
write.table(res, file='output/common_altered-pathways.txt', sep = "\t", quote = FALSE, row.names = FALSE)
data.IBD <- merge(dataset.CD, dataset.UC, by = "ENTREZ.ID")
colnames(data.IBD)[3] <- "logFC_CD"
colnames(data.IBD)[7] <- "logFC_UC"
colnames(data.IBD)[4] <- "pvalue_CD"
colnames(data.IBD)[8] <- "pvalue_UC"
View(data.IBD)
colnames(data.IBD)[3] <- "logFC_CD"
colnames(data.IBD)[7] <- "logFC_UC"
colnames(data.IBD)[4] <- "pvalue_CD"
colnames(data.IBD)[8] <- "pvalue_UC"
#before starting we should merge data table of CD and UC disease to process
data.IBD <- merge(dataset.CD, dataset.UC, by = "ENTREZ.ID")
colnames(data.IBD)[3] <- "logFC_CD"
colnames(data.IBD)[6] <- "logFC_UC"
colnames(data.IBD)[4] <- "pvalue_CD"
colnames(data.IBD)[7] <- "pvalue_UC"
RCy3::cytoscapePing()
RCy3::cytoscapePing()
RCy3::installApp(c("wikipathways","CyTargetLinker"))
RCy3::commandsRun('wikipathways import-as-pathway id=WP5095')
toggleGraphicsDetails()
RCy3::mapTableColumn("Ensembl", "Homo sapiens", "Ensembl", "Entrez Gene")
loadTableData(data.IBD, data.key.column = "ENTREZ.ID", table.key.column = "Entrez Gene")
RCy3::installApp("enhancedGraphics")
RCy3::copyVisualStyle("WikiPathways", "my_style_heatmap")
RCy3::setNodeCustomHeatMapChart(c("logFC_CD","logFC_UC"), slot = 2, style.name = "my_style_heatmap",
colors = c("#CC3300","#FFFFFF","#6699FF","#CCCCCC"))
RCy3::setVisualStyle("my_style_heatmap")
#Saving output
png.file <- file.path("output/PathwayVisualization.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(),"output/PathwayVisualization.cys")
saveSession(cys.file)
#comment following line if you want to manipulate the visualization in Cytoscape
RCy3::closeSession(save.before.closing = F)
View(ewp.CD)
pwy <- unique(ewp.CD.res[,c(1,2)])
View(pwy)
colnames(pwy) <- c("id","label")
edges <- wpid2gene[wpid2gene$wpid %in% pwy$id,]
View(edges)
colnames(edges) <- c("source", "target")
genes <- unique(deg.CD)
colnames(genes) <- c("id","label")
View(genes)
genes$type <- 'gene'
genes <- transform(genes, id = as.character(id))
View(wpid2gene)
##########################Pathway overlap visualization#################################
# There is often crosstalk and overlap between pathways enriched in gene expression analyses.
# The following step visualizes the overlap between the enriched pathways in a pathway-gene network.
# The genes not present in any pathway are included in the visualization but can be filtered
#in a follow-up step if preferred.
b <- ewp.CD.res[,c(1,2)]
View(b)
colnames(pwy) <- c("id","label")
pwy$type <- 'pathway'
View(wp2gene)
View(pwy)
edges <- wpid2gene[wpid2gene$wpid %in% pwy$id,]
View(edges)
colnames(edges) <- c("source", "target")
genes <- unique(deg.CD)
colnames(genes) <- c("id","label")
genes <- transform(genes, id = as.character(id))
genes$type <- 'gene'
View(genes)
edges <- unique(edges[edges$target %in% genes$id,])
genes <- genes[genes$id %in% edges$target,]
nodes <- dplyr::bind_rows(genes, pwy)
View(nodes)
rownames(nodes) <- NULL
createNetworkFromDataFrames(nodes=nodes,edges=edges,title="Pathway-Gene-Associations", collection="PathwayGeneCrosstalk")
loadTableData(data.IBD, data.key.column = "ENTREZ.ID", table.key.column = "id")
RCy3::copyVisualStyle("default","wp.vis")
RCy3::setNodeLabelMapping("label", style.name="wp.vis")
RCy3::lockNodeDimensions(TRUE, style.name="wp.vis")
RCy3::setNodeShapeMapping('type', c('gene','pathway'), c("ellipse","hexagon"), style.name="wp.vis")
RCy3::setNodeSizeMapping('type', c('gene','pathway'), c(40,25), mapping.type = "d", style.name = "wp.vis")
data.values<-c(-1,0,1)
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping("logFC_CD", data.values, node.colors, default.color = "#99FF99", style.name = "wp.vis")
RCy3::setVisualStyle("wp.vis")
RCy3::toggleGraphicsDetails()
svg.file <- file.path(getwd(), "output/PathwayCrosstalk.svg")
exportImage(svg.file,'SVG')
png.file <- file.path(getwd(), "output/PathwayCrosstalk.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(), "output/PathwayCrosstalk.cys")
saveSession(cys.file)
svg.file <- file.path(getwd(), "output/PathwayCrosstalk.svg")
exportImage(svg.file,'SVG')
png.file <- file.path(getwd(), "output/PathwayCrosstalk.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(), "output/PathwayCrosstalk.cys")
saveSession(cys.file)
svg.file <- file.path(getwd(), "output/PathwayCrosstalk.svg")
exportImage(svg.file,'SVG')
png.file <- file.path(getwd(), "output/PathwayCrosstalk.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(), "output/PathwayCrosstalk.cys")
saveSession(cys.file)
RCy3::cytoscapePing()
installApp('CyTargetLinker')
drugbank <- file.path(getwd(), "data/drugbank-5.1.0.xgmml")
# run CyTargetLinker
commandsRun(paste0('cytargetlinker extend idAttribute="id" linkSetFiles="', drugbank, '"'))
commandsRun('cytargetlinker applyLayout network="current"')
RCy3::setVisualStyle("wp.vis")
selected <- RCy3::selectNodes(nodes="drug", by.col = "CTL.Type")
RCy3::setNodeShapeBypass(node.names = selected$nodes, new.shapes = "Triangle")
RCy3::setNodeColorBypass(node.names = selected$nodes, "#FFFFCE")
RCy3::setNodeBorderColorBypass(node.names = selected$nodes, "#000000")
RCy3::setNodeBorderWidthBypass(node.names = selected$nodes, 4)
RCy3::clearSelection()
RCy3::toggleGraphicsDetails()
png.file <- file.path(getwd(), "output/drug_target.png")
exportImage(png.file,'PNG', zoom = 500)
View(pwy)
View(ewp.CD)
View(ewp.CD)
View(ewp.CD.res)
